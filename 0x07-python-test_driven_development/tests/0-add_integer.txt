The ``0-add_integer`` module
============================

Using ``add_integer``
---------------------


Import function from module:

    >>> add_integer = __import__('0-add_integer').add_integer


Test one int argument:

    >>> add_integer(4)
    102


Test one int argument and check default second:

    >>> add_integer(0)
    98


Test one float:

    >>> add_integer(127.8)
    225


Test one negative float:

    >>> add_integer(-98.3)
    0


Test two integers:

    >>> add_integer(14, 7)
    21


Test two big integers:

    >>> add_integer(999999996, 999999999)
    1999999995


Test + & - integers:

    >>> add_integer(34263478, -89234582395)
    -89200318917


Test - & + integers:

    >>> add_integer(-13947692, 57234)
    -13890458

Test integer & float:

    >>> add_integer(127, 7.987)
    134


Test float & integer:

    >>> add_integer(234234.43545, 4352345)
    4586579


Test two floats:

    >>> add_integer(0.9, 0.4)
    0


Add infinity:

    >>> add_integer(float('inf'), float('-inf'))
    Traceback (most recent call last):
    ...
    OverflowError: cannot convert float infinity to integer


Add nan:

    >>> add_integer(76, float('nan'))
    Traceback (most recent call last):
    ...
    ValueError: cannot convert float NaN to integer


Test first arg invalid:

    >>> add_integer("hi", 0)
    Traceback (most recent call last):
        ...
    TypeError: a must be an integer


Test second arg invalid:

    >>> add_integer(112763, [])
    Traceback (most recent call last):
        ...
    TypeError: b must be an integer


Test both args invalid:

    >>> add_integer(None, None)
    Traceback (most recent call last):
        ...
    TypeError: a must be an integer


Test two strings:

    >>> add_integer("my", "name")
    Traceback (most recent call last):
        ...
    TypeError: a must be an integer
